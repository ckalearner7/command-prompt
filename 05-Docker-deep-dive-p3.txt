											#####Docker Compose#####
###############
#Installing Docker Compose#
###############
# Шаг 1. Скачивание
[root@localhost ~]# sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   617    0   617    0     0    831      0 --:--:-- --:--:-- --:--:--   831
100 11.2M  100 11.2M    0     0  1610k      0  0:00:07  0:00:07 --:--:-- 2519k

# Шаг 2. Права на исполенение
[root@localhost ~]# sudo chmod +x /usr/local/bin/docker-compose

# Шаг 3. Проверка
[root@localhost ~]# docker-compose --version
docker-compose version 1.23.2, build 1110ad01

###############
#Compose Commands#
###############
# Шаг 1. Подготовка окружения
[fas@localhost ~]$ mkdir -p compose/commands
[fas@localhost ~]$ cd compose/commands/

# Шаг 2. Создание compose-файла
[fas@localhost commands]$ vi docker-compose.yml
version: '3'
services:
  web:
    image: nginx
    ports:
    - "8080:80"
    volumes:
    - nginx_html:/usr/share/nginx/html/
    links:
    - redis
  redis:
    image: redis
volumes:
  nginx_html: {}

# Шаг 3. Запуск контайнеров
[fas@localhost commands]$ docker-compose up -d # -d - запускать фоном
Creating network "commands_default" with the default driver
Creating volume "commands_nginx_html" with default driver
Pulling redis (redis:)...
latest: Pulling from library/redis
8ec398bc0356: Already exists
da01136793fa: Pull complete
cf1486a2c0b8: Pull complete
a44f7da98d9e: Pull complete
c677fde73875: Pull complete
727f8da63ac2: Pull complete
Creating commands_redis_1 ... done
Creating commands_web_1   ... done

# Шаг 4. Проверка контейнеров
[fas@localhost commands]$ docker-compose ps
      Name                    Command               State          Ports
--------------------------------------------------------------------------------
commands_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp
commands_web_1     nginx -g daemon off;             Up      0.0.0.0:8080->80/tcp

# Шаг 5. Проверка томов
[fas@localhost commands]$ docker volume ls | grep nginx
local               commands_nginx_html

# Шаг 6. Управление контейнерами
Starting a compose service:
	docker-compose start
Restarting a compose service:
	docker-compose restart
Delete a compose service:
	docker-compose down
	
# Шаг 7. Директория
[fas@localhost commands]$ cd ..
[fas@localhost compose]$ docker-compose ps # Сменили директорию и compose-фйл не обнаружили
ERROR:
        Can't find a suitable configuration file in this directory or any
        parent. Are you in the right directory?

        Supported filenames: docker-compose.yml, docker-compose.yaml

[fas@localhost compose]$ docker-compose -f commands/docker-compose.yml ps # Указываем, где находится файл
      Name                    Command               State          Ports
--------------------------------------------------------------------------------
commands_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp
commands_web_1     nginx -g daemon off;             Up      0.0.0.0:8080->80/tcp

# Список команд docker-compose:
	build              Build or rebuild services
	bundle             Generate a Docker bundle from the Compose file
	config             Validate and view the Compose file
	create             Create services
	down               Stop and remove containers, networks, images, and volumes
	events             Receive real time events from containers
	exec               Execute a command in a running container
	help               Get help on a command
	images             List images
	kill               Kill containers
	logs               View output from containers
	pause              Pause services
	port               Print the public port for a port binding
	ps                 List containers
	pull               Pull service images
	push               Push service images
	restart            Restart services
	rm                 Remove stopped containers
	run                Run a one-off command
	scale              Set number of containers for a service
	start              Start services
	stop               Stop services
	top                Display the running processes
	unpause            Unpause services
	up                 Create and start containers
	version            Show the Docker-Compose version information

###############
#Creating a Compose File#
###############
# Шаг 1. Подготовка окружения
[fas@localhost ~]$ cd compose 
[fas@localhost compose]$ git clone https://github.com/linuxacademy/content-weather-app.git weather-app
Cloning into 'weather-app'...
remote: Enumerating objects: 35, done.
remote: Total 35 (delta 0), reused 0 (delta 0), pack-reused 35
Unpacking objects: 100% (35/35), done.
[fas@localhost compose]$ ls
commands  weather-app
[fas@localhost compose]$ cd weather-app/
[fas@localhost weather-app]$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/compose
  remotes/origin/compose-lab
  remotes/origin/dockerignore
  remotes/origin/lab
  remotes/origin/master
  remotes/origin/remote-build
[fas@localhost weather-app]$ git checkout compose
Branch compose set up to track remote branch compose from origin.
Switched to a new branch 'compose'
[fas@localhost weather-app]$ ls # Dockerfile уже есть
Dockerfile  src
[fas@localhost weather-app]$

# Шаг 2. Проверка содержимого Dockerfile
[fas@localhost weather-app]$ vi Dockerfile
	# Create an image for the weather-app
	FROM node AS source
	RUN mkdir -p /node/weather-app
	ADD src/ /node/weather-app
	WORKDIR /node/weather-app
	RUN npm install

	FROM node:alpine
	ARG APP_VERSION=V1.1
	LABEL org.label-schema.version=$APP_VERSION
	ENV NODE_ENV="production"
	COPY --from=source /node/weather-app /node/weather-app
	WORKDIR /node/weather-app
	EXPOSE 3000
	ENTRYPOINT ["./bin/www"]
	
# Шаг 3. Создание compose-файла
[fas@localhost weather-app]$ vi docker-compose.yml
version: '3' # Версия compose-файла | соответствует версии Docker Engine
services:
  weather-app: # Название сервиса (не контейнера)
	container_name: weather1 # Имя контейнера
    build: 
      context: . # Путь к Dockerfile
      args: # Передача аргументов (в коде нет)
        - VERSION=v2.0
    ports:
      - "8081:3000" # Проброс портов
    environment: # Переменные окружения (в коде такие же должны быть)
      - NODE_ENV=production

# Шаг 4. Запуск контейнеров 
[fas@localhost weather-app]$ docker-compose up -d

Successfully built 54fb8412c8d3
Successfully tagged weather-app_weather-app:latest
WARNING: Image for service weather-app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Creating weather-app_weather-app_1 ... done

# Шаг 5. Проверка
[fas@localhost weather-app]$ docker-compose ps
          Name               Command    State           Ports
----------------------------------------------------------------------
weather-app_weather-app_1   ./bin/www   Up      0.0.0.0:8081->3000/tcp

[fas@localhost weather-app]$ curl localhost:8081
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test</title>
	
# Если внесем изменения в Dockerfile, то нужно сделать rebuild: 
	docker-compose build

###############
#Using Volumes and Networking with Compose#
###############
https://docs.docker.com/compose/compose-file/

# Шаг 1. Подготовка окружения
[fas@localhost ~]$ mkdir -p compose/ghost
[fas@localhost ~]$ cd compose/ghost/

	
# Шаг 2. Создание compose-файла
[fas@localhost ghost]$ vi docker-compose.yml
version: '3'
services:
  ghost:
    container_name: ghost
    image: ghost:latest
    ports:
      - "80:2368"
    environment:
      - database__client=mysql
      - database__connection__host=mysql
      - database__connection__user=root
      - database__connection__password=P4SSw0rd0!
      - database__connection__database=ghost
    volumes:
      - ghost-volume:/var/lib/ghost
    networks:
      - ghost_network
      - mysql_network
    depends_on:
      - mysql

  mysql:
    container_name: mysql # Название такое же, как в секции depends_on
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=P4SSw0rd0!
    volumes:
      - mysql-volume:/var/lib/mysql
    networks:
      - mysql_network

volumes: # Используются выше
  ghost-volume:
  mysql-volume:

networks:
  ghost_network:
  mysql_network:
 
 	
# Шаг 3. Запуск контейнеров
[fas@localhost ghost]$ docker-compose up -d
Creating network "ghost_mysql_network" with the default driver
Creating network "ghost_ghost_network" with the default driver
Creating volume "ghost_ghost-volume" with default driver
Creating volume "ghost_mysql-volume" with default driver
Pulling ghost (ghost:latest)...
latest: Pulling from library/ghost
8ec398bc0356: Already exists
112ac9e2e797: Pull complete
eca16db4ddc2: Pull complete
031e56e0ed66: Pull complete
c4bc356f2cbe: Pull complete
07a228a3cf77: Pull complete
fe8a2e972588: Pull complete
23ce808c6f34: Pull complete
bb97272fd8db: Pull complete
Creating mysql ... done
Creating ghost ... done

# Шаг 4. Проверка
[fas@localhost ghost]$ docker-compose ps
Name               Command               State          Ports
---------------------------------------------------------------------
ghost   docker-entrypoint.sh node  ...   Up      0.0.0.0:80->2368/tcp
mysql   docker-entrypoint.sh mysqld      Up      3306/tcp, 33060/tcp

[fas@localhost ghost]$ docker volume ls | grep ghost
local               ghost_ghost-volume
local               ghost_mysql-volume

[fas@localhost ghost]$ docker network ls | grep ghost
b715db7c7ea6        ghost_ghost_network   bridge              local
cfc84bc3e5c1        ghost_mysql_network   bridge              local


[fas@localhost ghost]$ curl localhost:80
<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

###############
#Lab. Building a Microservice with Docker Compose#
###############
In the lab directory you will find two directories. The nginx directory has Dockerfie and nginx.conf file. 
Nginx will be used to load balance the weather-app. The weather-app directory has the Dockerfile and source code.
In the lab directory, create a docker compose file.

[cloud_user@ip-10-0-1-158 ~]$ ls
lab
[cloud_user@ip-10-0-1-158 ~]$ cd lab/
[cloud_user@ip-10-0-1-158 lab]$ ls
nginx  weather-app

Setting up the weather-app
Make sure the version you are using is 3
Create three weather-app services: weather-app1, weather-app2, weather-app3.
Each one should build an image that is located in the weather-app directory.
It will take one argument VERSION and set it to v2.0.
For weather-app1 publish port 8080 to 3000 on the container.
For weather-app2 publish port 8081 to 3000 on the container.
For weather-app3 publish port 8082 to 3000 on the container.
All three weather-app containers will be on the weather_app network which is internal.
The NODE_ENV environment variable will be set to production.

Setting up Nginx
Create a service called nginx.
Update upstream localhost in nginx.conf to include the three containers with their private port.
Example: server [APP-NAME]:[PORT]
Build an image using the Dockerfile in the nginx directory.
Set tty to true.
Publish port 80 to port 80 on the container.
The nginx container will be on two networks: frontend and weather_app.

Setting up the Networks:
Create a public network called frontend.
Create an internal network called weather_app.

Deploy the services:
Bring up the services. Test to make sure that everything is working by curling localhost.

# Шаг 1. Подготовка окружения
[cloud_user@ip-10-0-1-158 ~]$ ls
lab
[cloud_user@ip-10-0-1-158 ~]$ cd lab/
[cloud_user@ip-10-0-1-158 lab]$ ls
nginx  weather-app

# Шаг 2. Dockerfile приложения
[cloud_user@ip-10-0-1-158 lab]$ ls weather-app/
Dockerfile  src

[cloud_user@ip-10-0-1-158 lab]$ vi weather-app/Dockerfile
# Create an image for the weather-app
FROM node AS source
RUN mkdir -p /node/weather-app
ADD src/ /node/weather-app
WORKDIR /node/weather-app
RUN npm install

FROM node:alpine
ARG APP_VERSION=V1.1
LABEL org.label-schema.version=$APP_VERSION
ENV NODE_ENV="production"
COPY --from=source /node/weather-app /node/weather-app
WORKDIR /node/weather-app
EXPOSE 3000
ENTRYPOINT ["./bin/www"]

# Шаг 3. Dockerfile NGINX
[cloud_user@ip-10-0-1-158 lab]$ ls nginx/
Dockerfile  nginx.conf

[cloud_user@ip-10-0-1-158 lab]$ vi nginx/Dockerfile
FROM nginx
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

# Шаг 4. Конфигурация NGINX
[cloud_user@ip-10-0-1-158 lab]$ vi nginx/nginx.conf
events { worker_connections 1024; }

http {
  upstream localhost {
    server weather-app1:3000;
    server weather-app2:3000;
    server weather-app3:3000;
  }
  server {
    listen 80;
    server_name localhost;
    location / {
      proxy_pass http://localhost;
      proxy_set_header Host $host;
    }
  }
}

# Шаг 5. Compose-файл
[cloud_user@ip-10-0-1-158 lab]$ vi docker-compose.yml
      - weather_app
   environment:
      - NODE_ENV="production"
  weather-app2:
    container_name: weather-app2
    build:
      context: ./weather-app
      args:
        - VERSION=v2.0
    ports:
      - "8081:3000"
    networks:
      - weather_app
   environment:
      - NODE_ENV="production"
  weather-app3:
    container_name: weather-app3
    build:
      context: ./weather-app
      args:
        - VERSION=v2.0
    ports:
      - "8083:3000"
    networks:
      - weather_app
   environment:
      - NODE_ENV="production"
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    tty: true
    ports:
      - "80:80"
    networks:
      - frontend
      - weather_app

networks:
  frontend:
  weather_app:
    internal: true

# Шаг 6. Запуск контейнеров
[cloud_user@ip-10-0-1-158 lab]$ docker-compose up -d
WARNING: Image for service nginx was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Creating weather-app3 ... done
Creating weather-app2 ... done
Creating weather-app1 ... done
Creating nginx        ... done

# Шаг 7. Проверка
[cloud_user@ip-10-0-1-158 lab]$ docker-compose ps
    Name             Command          State         Ports
----------------------------------------------------------------
nginx          nginx -g daemon off;   Up      0.0.0.0:80->80/tcp
weather-app1   ./bin/www              Up
weather-app2   ./bin/www              Up
weather-app3   ./bin/www              Up

[cloud_user@ip-10-0-1-158 lab]$ docker network ls | grep lab
2127b1e5af58        lab_frontend        bridge              local
2369cd01f842        lab_weather_app     bridge              local