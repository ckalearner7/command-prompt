						##### Terraform 0.12 #####
###############
#Setup and Disclaimer#
###############

# We will install Terraform 0.12.2 and talk about some of the pitfalls you may encounter working with such a new release.

# Шаг 1. Install Terraform 0.12:
	cd /tmp
	sudo curl -O https://releases.hashicorp.com/terraform/0.12.2/terraform_0.12.2_linux_amd64.zip
	sudo unzip terraform_0.12.2_linux_amd64.zip
	sudo cp terraform /usr/bin/terraform12
	
[cloud_user@fas2c tmp]$ ls /usr/local/bin/ | grep ter # Старая версия
terraform

[cloud_user@fas2c tmp]$ ls  /usr/bin/ | grep terr # Новая версия
terraform12

# Шаг 2. Test the Terraform installation:
	terraform12 version
	
[cloud_user@fas2c storage]$ terraform version
Terraform v0.11.13
+ provider.aws v2.59.0
+ provider.random v2.2.1

[cloud_user@fas2c storage]$ terraform12 version
Terraform v0.12.2
+ provider.aws v2.59.0
+ provider.random v2.2.1


# Шаг 3. Setup a Terraform 0.12 directory:
	mkdir /home/cloud_user/terraform/t12
	cd /home/cloud_user/terraform/t12
	cp -r /home/cloud_user/terraform/basics .
	cd basics
	rm -r .terraform

# Шаг 4. Test Docker by initializing Terraform:
	terraform12 init

# Шаг 5. Copy AWS/storage to the Terraform 0.12 directory:
	cd /home/cloud_user/terraform/t12
	cp -r ../AWS/storage .
	cd storage

# Шаг 6. Edit main.tf:
	vi main.tf

#---------storage/main.tf---------

# Create a random id
resource "random_id" "tf_bucket_id" {
  byte_length = 2
}

# Create the bucket
resource "aws_s3_bucket" "tf_code" {
    bucket        = "${var.project_name}-${random_id.tf_bucket_id.dec}"
    acl           = "private"

    force_destroy =  true

    tags = { # Появилось =
      Name = "tf_bucket"
    }
}

# Шаг 7. Set up the AWS access key:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]]"
	export AWS_DEFAULT_REGION="us-east-1"

# Шаг 8. Initialize Terraform:
	terraform12 init

# Шаг 9. Deploy the S3 bucket:
	terraform12 apply -var project_name=la-terraform -auto-approve
	
Outputs:
bucketname = la-terraform-13088

# Шаг 10. Destroy the S3 bucket:
	terraform12 destroy -var project_name=la-terraform -auto-approve

# Шаг 11. Test with the older version of Terraform:
	ls -la
	rm -r .terraform terraform.tfstate*
	terraform init
	terraform apply -var project_name=la-terraform -auto-approve
	terraform destroy -var project_name=la-terraform -auto-approve

# Новый синтаксис в main.tf сработал и на Terraform v 0.11
Outputs:
bucketname = la-terraform-34614

###############
#Working with Resources (New S3)#
###############

# We will start refactoring the storage module to use some of the new features of Terraform 0.12.x.

# Шаг 1. Set up the environment:
	cd /home/cloud_user/terraform/t12/storage
	rm -rf *

# Шаг 2. Create main.tf:
	vi main.tf

# Create a random id
resource "random_id" "tf_bucket_id" {
  byte_length = 2
}

# Create the bucket
resource "aws_s3_bucket" "tf_code" {
    bucket        = format("la-terraform-%d", random_id.tf_bucket_id.dec) # format - создает строку из la-terraform- и random_id.tf_bucket_id.dec(тип %d)
    acl           = "private"

    force_destroy =  true

    tags = {
      Name = "tf_bucket"
    }
}

# Шаг 3. Set up the AWS access key:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]]"
	export AWS_DEFAULT_REGION="us-east-1"

# Шаг 4. Initialize Terraform:
	terraform12 init

# Шаг 5. Deploy the S3 bucket:
	terraform12 apply -auto-approve

# Шаг 6. Destroy the S3 bucket:
	terraform12 destroy -auto-approve
	
###############
#Input Variables#
###############

# We will continue refactoring the storage module by adding in variables.

# Шаг 1. Create variables.tf:
	vi variables.tf

variable "project_name" {
  type = string
}

# Шаг 2. Create main.tf:
	vi main.tf

# Create a random id
resource "random_id" "tf_bucket_id" {
  byte_length = 2
}

# Create the bucket
resource "aws_s3_bucket" "tf_code" {
    bucket        = format("%s-%d", var.project_name, random_id.tf_bucket_id.dec)
    acl           = "private"
    force_destroy =  true
    tags          = {
      Name = "tf_bucket"
    }
}

# Шаг 3. Set up the AWS access key:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]]"
	export AWS_DEFAULT_REGION="us-east-1"

# Шаг 4. Plan the deploy of the S3 bucket:
	terraform12 plan -var project_name=la-terraform

# Шаг 5. Deploy the S3 bucket:
	terraform12 apply -var project_name=la-terraform -auto-approve

# Шаг 6. Destroy the S3 bucket:
	terraform12 destroy -var project_name=la-terraform -auto-approve
	
###############
#Output Values#
###############

# We will finish off refactoring the storage module by adding outputs of the S3 bucket name as well as the project_name variable.

# Шаг 1. Create outputs.tf:
	vi outputs.tf

output "bucketname" {
  value = aws_s3_bucket.tf_code.id
}

output "project_name" {
  value = var.project_name
}

# Шаг 2. Initialize Terraform:
	terraform12 init

# Шаг 3. Deploy the S3 bucket:
	terraform12 apply -var project_name=la-terraform -auto-approve

# Шаг 4. Destroy the S3 bucket:
	terraform destroy -var project_name=la-terraform -auto-approve
	
###############
#Dynamic Nested Blocks Part 1#
###############
# Материалы:
# https://www.terraform.io/docs/configuration/index.html
# https://www.terraform.io/docs/configuration/expressions.html

# We will begin working with dynamic nested blocks to dynamically construct nested blocks.

# Шаг 1. Set up the environment:
	mkdir ~/terraform/t12/loops
	cd ~/terraform/t12/loops

# Шаг 2. Create main.tf:
	vi main.tf

variable "vpc_cidr" {
  default = "10.123.0.0/16"
}

variable "accessip" {
  default = "0.0.0.0/0"
}

variable "service_ports" {
  default = ["22", "80"]
}

resource "aws_vpc" "tf_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "tf_vpc"
  }
}

resource "aws_security_group" "tf_public_sg" {
  name        = "tf_public_sg"
  description = "Used for access to the public instances"
  vpc_id      = aws_vpc.tf_vpc.id

  dynamic "ingress" {
    for_each = var.service_ports # Цикл for_each
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = [var.accessip]
    }
  }
}

# Шаг 3. Initialize Terraform:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]"
	export AWS_DEFAULT_REGION="us-east-1"
	terraform12 init

# Шаг 4. Plan the changes:
	terraform12 plan

###############
#Dynamic Nested Blocks Part 2#
###############

# We will expand on it by using the for expression to loop through a list of maps.

# Шаг 1. Set up the environment:
	mkdir ~/terraform/t12/dynamic
	cd ~/terraform/t12/dynamic

# Шаг 2. Create main.tf:
	vi main.tf

variable "vpc_cidr" {
  default = "10.123.0.0/16"
}

variable "accessip" {
  default = "0.0.0.0/0"
}

variable "service_ports" {
  default = [ # Это list of maps
    {
      from_port = "22",
      to_port   = "22"
    },
    {
      from_port = "80",
      to_port   = "80"
    }
  ]
}

resource "aws_vpc" "tf_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "tf_vpc"
  }
}

resource "aws_security_group" "tf_public_sg" {
  name        = "tf_public_sg"
  description = "Used for access to the public instances"
  vpc_id      = aws_vpc.tf_vpc.id

  dynamic "ingress" {
    for_each = [ for s in var.service_ports: {
      from_port = s.from_port
      to_port = s.to_port
    }]

    content {
      from_port   = ingress.value.from_port
      to_port     = ingress.value.to_port
      protocol    = "tcp"
      cidr_blocks = [var.accessip]
    }
  }
}

output "ingress_port_mapping" {
  value = {
    for ingress in aws_security_group.tf_public_sg.ingress:
    format("From %d", ingress.from_port) => format("To %d", ingress.to_port)
  }
}

# Шаг 3. Initialize Terraform:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]"
	export AWS_DEFAULT_REGION="us-east-1"
	terraform12 init

# Шаг 4. Plan the changes:
	terraform12 plan

# Шаг 5. Apply the changes:
	terraform12 apply -auto-approve

# Шаг 6. Destroy the changes:
	terraform12 destroy -auto-approve
	
###############
#Expressions and Functions#
###############
# Материалы:
# https://www.terraform.io/docs/configuration/functions.html
# https://www.terraform.io/docs/configuration/functions/cidrsubnet.html

# We will look at the documentation for functions. Then, we will use the cidrsubnet function to calculate a subnet address within a given IP network address prefix.

# Шаг 1. Set up the environment:
	mkdir ~/terraform/t12/functions
	cd ~/terraform/t12/functions

# Шаг 2. Create main.tf:
	vi main.tf

variable "vpc_cidr" {
  default = "10.123.0.0/16"
}

variable "accessip" {
  default = "0.0.0.0/0"
}

variable "subnet_numbers" {
  default = [1, 2, 3]
}

resource "aws_vpc" "tf_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "tf_vpc"
  }
}

resource "aws_security_group" "tf_public_sg" {
  name        = "tf_public_sg"
  description = "Used for access to the public instances"
  vpc_id      = aws_vpc.tf_vpc.id

  ingress {
    from_port   = "22"
    to_port     = "22"
    protocol    = "tcp"
    cidr_blocks = [
      for num in var.subnet_numbers:
      cidrsubnet(aws_vpc.tf_vpc.cidr_block, 8, num) # В результате сеть 10.123.0.0/16 разделится на 10.123.1.0/(16+8), 10.123.2.0/24, 10.123.3.0/24
    ]
  }
}

# Шаг 3. Initialize Terraform:
	export AWS_ACCESS_KEY_ID="[ACCESS_KEY]"
	export AWS_SECRET_ACCESS_KEY="[SECRET_KEY]"
	export AWS_DEFAULT_REGION="us-east-1"
	terraform12 init

# Шаг 4. Plan the changes:
	terraform12 plan
	
###############
#Lab 1. Refactoring Terraform Code#
###############
# Our team is preparing to migrate over to Terraform 0.12, and this newer version

# Шаг 1. Edit variables.tf:
	vi variables.tf

variable "vpc_cidr" {
  default = "10.123.0.0/16"
}

variable "accessip" {
  default = "0.0.0.0/0"
}

variable "service_ports" {
  default = [
    {
      from_port = "22",
      to_port   = "22"
    },
    {
      from_port = "80",
      to_port   = "80"
    }
  ]
}

# Шаг 2. Edit main.tf:
	vi main.tf

resource "aws_vpc" "tf_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "tf_vpc"
  }
}

resource "aws_security_group" "tf_public_sg" {
  name        = "tf_public_sg"
  description = "Used for access to the public instances"
  vpc_id      = aws_vpc.tf_vpc.id

  dynamic "ingress" {
    for_each = [ for s in var.service_ports: {
      from_port = s.from_port
      to_port = s.to_port
    }]

    content {
      from_port   = ingress.value.from_port
      to_port     = ingress.value.to_port
      protocol    = "tcp"
      cidr_blocks = [var.accessip]
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Шаг 3. Edit outputs.tf:
	vi outputs.tf

output "public_sg" {
  value = aws_security_group.tf_public_sg.id
}

output "ingress_port_mapping" {
  value = {
    for ingress in aws_security_group.tf_public_sg.ingress:
    format("From %d", ingress.from_port) => format("To %d", ingress.to_port)
  }
}

# Шаг 4. Initialize Terraform:
	terraform init

# Шаг 5. Validate the files:
	terraform validate

# Шаг 6. Plan the deploy:
	terraform plan

# Шаг 7. Deploy the environment:
	terraform apply –auto-approve